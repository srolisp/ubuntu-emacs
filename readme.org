#+title: emacs configurations
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Adjust to init.el after saving settings.org

** org file property 설정
   tangle로 org-babel-tangle에 의해 코드들을 저장할 파일을
   지정해준다. ~/.emacs.d/org/settings.org 파일 수정후 저장하면
   ~/.emacs.d/init.el에 적용된다. header-args:emacs-lisp 에 의해
   소스블락이 emacs-lisp의 경우에 적용된다. mkdirp yes 옵션으로
   디렉토리가 없으면 생성시킨다.

   #+begin_verse
     settings.org 파일 상단에
     #+title: emacs configurations
     #+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
   #+end_verse

   #+begin_src emacs-lisp
     (defun xr-org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
			   (expand-file-name (concat default-directory "settings.org")))
	 ;; Dynamic scoping to the rescue
	 (let ((org-confirm-babel-evaluate nil))
	   (org-babel-tangle)
	   ;; FIX: remove tangling for reamde.org repeatedly
	   (copy-file (buffer-name) (concat user-emacs-directory "readme.org") t))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'xr-org-babel-tangle-config)))
   #+end_src

* Basic setup
  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)

    (set-background-color "#002b00")
    (set-foreground-color "#ffe97a")

    (set-face-attribute 'default nil 
			:family "fixed"
			:height 98)

    (when window-system
      (set-frame-parameter (selected-frame) 'alpha (list 80 80))
      (add-to-list 'default-frame-alist `(alpha . 80)))

      (setq backup-directory-alist `(("." . ,(concat user-emacs-directory ".saves"))))      

  #+END_src

* package
  package 관리를 use-package를 써서 관리해보자
  #+begin_src emacs-lisp
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
  #+end_src

** ivy
   #+begin_src emacs-lisp
     (use-package ivy
       :bind (("C-s" . swiper))
       :init
       (ivy-mode 1))
       
     (use-package ivy-rich
       :init
       (ivy-rich-mode 1))
   #+end_src

** counsel
   #+begin_src emacs-lisp
     (use-package counsel
       :bind (("M-x" . counsel-M-x)
	      ;; ("C-x b" . counsel-ibuffer)
	      ("C-x C-b" . counsel-switch-buffer)
	      ;; :map minibuffer-local-map
	      ("C-c r" . counsel-minibuffer-history)
	      )
       :config
       (counsel-mode 1))
   #+end_src
